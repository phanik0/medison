plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Java
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Test
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Data
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.oracle.database.jdbc:ojdbc8:21.3.0.0'
    implementation 'mysql:mysql-connector-java:8.0.33'

    // JSP
    implementation 'javax.servlet:jstl:1.2'
    implementation 'taglibs:standard:1.1.2'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:9.0.87'

    // JSON
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    implementation 'com.itextpdf:itext7-core:7.2.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.incremental = true
}

tasks.withType(AbstractArchiveTask) {
    outputs.cacheIf { true }
}

tasks.register('webpackBuild', Exec) {
    workingDir = file('src/main/resources/static')
    commandLine 'npm.cmd', 'run', 'build'
    environment 'PATH', System.getenv('PATH')
    inputs.dir 'src/main/resources/static'
    outputs.dir 'build/resources/main/static'
    standardOutput = new ByteArrayOutputStream()
    errorOutput = standardOutput
    ignoreExitValue = true
    doLast {
        println standardOutput.toString()
    }
}

//processResources.dependsOn tasks.named('webpackBuild')
processResources {
    inputs.files fileTree('src/main/resources/static')
    outputs.dir file('build/resources/main/static')
    dependsOn tasks.named('webpackBuild')
    doFirst {
        println 'Processing resources...'
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':processResources')) {
        processResources {
            inputs.files fileTree('src/main/resources/static') {
                include '**/*.js', '**/*.html', '**/*.css'  // 필요한 파일만 포함
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.incremental = true
}

tasks.withType(AbstractArchiveTask) {
    outputs.cacheIf { true }
}